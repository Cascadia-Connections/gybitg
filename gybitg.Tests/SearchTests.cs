using System;
using System.Collections.Generic;
using System.Text;
using Xunit;
using Moq;
using gybitg.Controllers;
using gybitg.Models;
using Microsoft.AspNetCore.Identity;
using gybitg.Data;
using gybitg.Models.Repositories;
using System.Linq;
using gybitg.Models.SearchViewModels;
using Microsoft.AspNetCore.Mvc;

namespace gybitg.Tests
{
    public class SearchTests
    {
        [Fact]
        public void SearchResultsReturnsRightAthlete()
        {
            //Arrange
            Mock<UserManager<ApplicationUser>> mockUserManager = new Mock<UserManager<ApplicationUser>>(); //not used for this test but is needed for SearchController parameter
            Mock<IAthleteRepository> mockAthleteRepo = new Mock<IAthleteRepository>();
            mockAthleteRepo.Setup(m => m.athleteProfiles).Returns((
                new List<AthleteProfile>
        {
            //            new AthleteProfile {HighschoolName = "Bothell", HSGraduationDate = new DateTime(06-01-2020), UserId = "1", HighschoolCoach = "Bob", AAUCoach = "Mary", AAUId = "3"},
            //new AthleteProfile {HighschoolName = "Inglemoor", HSGraduationDate = new DateTime(06-01-2021), UserId = "2", HighschoolCoach = "Cindy", AAUCoach = "Susan", AAUId = "7"},
            //new AthleteProfile {HighschoolName = "Woodinville", HSGraduationDate = new DateTime(06-02-2021), UserId = "3", HighschoolCoach = "Prudence", AAUCoach = "Sarah", AAUId = "17"},
            //new AthleteProfile {HighschoolName = "Jackson", HSGraduationDate = new DateTime(06-01-2023), UserId = "4", HighschoolCoach = "Zack", AAUCoach = "Emily", AAUId = "2"},
            //new AthleteProfile {HighschoolName = "Juanita", HSGraduationDate = new DateTime(06-03-2023), UserId = "5", HighschoolCoach = "Teresa", AAUCoach = "Tina", AAUId = "11"},
            //new AthleteProfile {HighschoolName = "Bothell", HSGraduationDate = new DateTime(05-28-2023), UserId = "6", HighschoolCoach = "Sally", AAUCoach = "Ashley", AAUId = "0"},
            //new AthleteProfile {HighschoolName = "Mariner", HSGraduationDate = new DateTime(06-01-2021), UserId = "7", HighschoolCoach = "Betty", AAUCoach = "Denise", AAUId = "6"}
        }).AsQueryable<AthleteProfile>());

            SearchController controller = new SearchController(mockUserManager.Object, mockAthleteRepo.Object);

            //Parameters for SearchResult
            //List of application users that would normally be generated in the AthleteListToSearch method
            IList<ApplicationUser> testUsers = new List<ApplicationUser>();
            ApplicationUser SueBean = new ApplicationUser { Position = "Point Guard", Id = "1", FirstName = "Sue", LastName = "Bean" };
            ApplicationUser DaisyShield = new ApplicationUser { Position = "Shooting Guard", Id = "2", FirstName = "Daisey", LastName = "Shield" };
            ApplicationUser BlackWidow = new ApplicationUser { Position = "Small Forward", Id = "3", FirstName = "Black", LastName = "Widow" };
            ApplicationUser WaspB = new ApplicationUser { Position = "Power Forward", Id = "4", FirstName = "Wasp", LastName = "B" };
            ApplicationUser AngelaJole = new ApplicationUser { Position = "Center Forward", Id = "5", FirstName = "Angela", LastName = "Jole" };
            ApplicationUser SabrinaWitch = new ApplicationUser { Position = "Shooting Guard", Id = "6", FirstName = "Sabrina", LastName = "Witch" };
            ApplicationUser AliciaAvenger = new ApplicationUser { Position = "Small Forward", Id = "7", FirstName = "Alicia", LastName = "Avenger" };
            testUsers.Add(SueBean);
            testUsers.Add(DaisyShield);
            testUsers.Add(BlackWidow);
            testUsers.Add(WaspB);
            testUsers.Add(AngelaJole);
            testUsers.Add(SabrinaWitch);
            testUsers.Add(AliciaAvenger);
            //SearchParam that would normally be generated by either the BasicSearch or AdvancedSearchMethods
            SearchViewModel testNameSearch = new SearchViewModel();
            testNameSearch.Name = "Angela";
            //Act
            //List<SearchResultsViewModel> nameResults = controller.SearchResults(testUsers, testNameSearch);
            //Assert



        }
    }
}
