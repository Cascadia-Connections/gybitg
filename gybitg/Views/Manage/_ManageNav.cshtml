@using gybitg.Views.Manage
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();

    var _curUser = await UserManager.GetUserAsync(User);

}

<ul class="nav nav-pills nav-divider nav-stacked">
    <li class="@ManageNavPages.IndexNavClass(ViewContext)"><a asp-action="Index">Account</a></li>

    @if (await UserManager.IsInRoleAsync(_curUser, "Athlete")) // athlete profile & stats 
    {
        <li class="@ManageNavPages.EditAthleteProfileNavClass(ViewContext)"><a asp-action="EditAthleteProfile" asp-route-id="@_curUser.Id">Profile</a></li>
        <li class="@ManageNavPages.EditAthleteStatsNavClass(ViewContext)"><a asp-action="EditAthleteStats" asp-route-id="@_curUser.Id">Stats</a> </li>
    }
    else if (await UserManager.IsInRoleAsync(_curUser, "Coach")) // coach profile 
    {
        <li class="@ManageNavPages.EditCoachProfileNavClass(ViewContext)"><a asp-action="EditCoachProfile" asp-route-id="@_curUser.Id">Profile</a> </li>
    }

    <li class="@ManageNavPages.ChangePasswordNavClass(ViewContext)"><a asp-action="ChangePassword">Password</a></li>
    @if (hasExternalLogins)
    {
        <li class="@ManageNavPages.ExternalLoginsNavClass(ViewContext)"><a asp-action="ExternalLogins">External logins</a></li>
    }
    <li class="@ManageNavPages.TwoFactorAuthenticationNavClass(ViewContext)"><a asp-action="TwoFactorAuthentication">Two-factor authentication</a></li>

	<li class="@ManageNavPages.DeleteProfileNavClass(ViewContext)"><a asp-action="DeleteProfile" asp-route-id="@_curUser.Id">Delete Profile</a></li>
</ul>

